;standard lib for bob-language.

(define cadr (x)
  (car (cdr x)))
  
(define caar (x)
  (car (car x)))
  
(define cadar (x)
  (car (cdr (car x))))

(define null (x)
  (eq x '()))
	
(define and (x y)
  (cond (x (cond (y 'true)
			     ('true 'false)))
		('true 'false)))

(define not (x)
  (cond (x 'false)
		('true 'true)))

(define append (x y)
  (cond ((null x) y)
  		('true (cons (car x) (append (cdr x) y)))))
  		
;(define pair (x y)
;  (cond ((and (null x) (null y) '())
;		((and (not (atom x)) (not (atom y)))
;		 (cons (list (car x) (car y))
;		 	   (pair (cdr x) (cdr y)))))))

(define assoc (x y)
  (cond ((eq (caar y) x) (cadar y))
  		('true (assoc x (cdr y))))) 	
  		
  		
(define bob ()
  (puts "Bob eats you for breakfast. Like a grue. MEEP."))
	
(define provoke-bob ()
  ((puts "NEVER PROVOKE ME!! I WILL STACK OVERFLOW YOU, FOOOOOL!!!!")
  (provoke-bob)))
  
(define how-big-is-my-stack ()
  ((define helper (x)
     ((define x (+ x 1))
      (puts x)
      (helper x)))
    (helper 0)))
    
(define time-it (expr)
  ((define a current-time)
   (eval expr)
   (define b current-time)
   (puts (- b a))))
