;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;standard lib for bob-language.;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(define cadr (x)
  (car (cdr x)))
  
(define caar (x)
  (car (car x)))
  
(define cadar (x)
  (car (cdr (car x))))

(define null (x)
  (eq x '()))
	
(define and (x y)
  (cond (x (cond (y 'true)
			     ('true 'false)))
		('true 'false)))

(define not (x)
  (cond (x 'false)
		('true 'true)))

(define append (x y)
  (cond ((null x) y)
  		('true (cons (car x) (append (cdr x) y)))))
  		
(define pair (x y)
  (cond ((and (null x) (null y) '())
		((and (not (atom x)) (not (atom y)))
		 (cons (list (car x) (car y))
		 	   (pair (cdr x) (cdr y)))))))

(define assoc (x y)
  (cond ((eq (caar y) x) (cadar y))
  		('true (assoc x (cdr y))))) 
        					       

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;EVAL AND HELPER FUNCS;;;;=============================
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define eval. (e a)
  (cond
    ((atom e) (assoc e a))
    ((atom (car e))
     (cond
       ((eq (car e) 'quote) (cadr e))
       ((eq (car e) 'atom)  (atom   (eval. (cadr e) a)))
       ((eq (car e) 'eq)    (eq     (eval. (cadr e) a)
                                    (eval. (caddr e) a)))
       ((eq (car e) 'car)   (car    (eval. (cadr e) a)))
       ((eq (car e) 'cdr)   (cdr    (eval. (cadr e) a)))
       ((eq (car e) 'cons)  (cons   (eval. (cadr e) a)
                                    (eval. (caddr e) a)))
       ((eq (car e) 'cond) (evcon. (cdr e) a))
       ('true (eval. (cons (assoc (car e) a)
                        (cdr e))
                  a))))
    ((eq (caar e) 'label)
     (eval. (cons (caddar e) (cdr e))
            (cons (list (cadar e) (car e)) a)))
    ((eq (caar e) 'lambda)
     (eval. (caddar e)
            (append (pair (cadar e) (evlis. (cdr e) a))
                     a))))))
(define evcon. (c a)
  (cond ((eval. (caar c) a)
         (eval. (cadar c) a))
        ('true (evcon. (cdr c) a))))
(define evlis. (m a)
  (cond ((null m) '())
        ('true (cons (eval. (car m) a)
                  (evlis. (cdr m) a)))))

;;;;;;;;;;;;;;;;
;;;;END EVAL;;;;==========================================
;;;;;;;;;;;;;;;;	
  		
  		
(define bob ()
  (puts "Bob eats you for breakfast. Like a grue. MEEP."))
	
(define provoke-bob ()
  ((puts "NEVER PROVOKE ME!! I WILL STACK OVERFLOW YOU, FOOOOOL!!!!")
  (provoke-bob)))
  
(define how-big-is-my-stack ()
  ((define helper (x)
     ((define x (+ x 1))
      (puts x)
      (helper x)))
    (helper 0)))
    
(define time-it (expr)
  ((define a current-time)
   (eval expr)
   (define b current-time)
   (puts (- b a))))

;(define foldr (f z xs)
;  (cond ((null xs) z)
;        ('true (f (car xs) (foldr f z (cdr xs)))))
    
;(define filter (func data)
;  (cond ((null data) '())
;        ('true (cons 
 
 
(define map (func data)
  (cond ((null data) '())
  	    ('true (cons (func (car data)) 
  	                 (map func (cdr data))))))
  	    
(define double (x)
  (+ x x))

(define meep ()
  (puts "Thou who hast meeped shalt bear the title of meeper."))
  
(define god-mode ()
  (puts "Sorry, this mode is not available. Please try again later."))
  
(define laffs ()
  (puts "why did the chicken cross the road?\nTo get to the other side!"))
  
(define let-me-in ()
  (puts "I'm sorry Dave. I'm afraid I can't do that."))
   
(define John 'h4x0r)